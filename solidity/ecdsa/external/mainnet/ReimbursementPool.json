{
  "address": "0x8adF3f35dBE4026112bCFc078872bcb967732Ea8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_staticGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGasPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyContract",
          "type": "address"
        }
      ],
      "name": "AuthorizedContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "MaxGasPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SendingEtherFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStaticGas",
          "type": "uint256"
        }
      ],
      "name": "StaticGasUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyContract",
          "type": "address"
        }
      ],
      "name": "UnauthorizedContract",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasSpent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_staticGas",
          "type": "uint256"
        }
      ],
      "name": "setStaticGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staticGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "unauthorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xee0d41cc8b64e436197e3f7521773a3733a7b0d42af14934c712efeaabff84fc",
  "receipt": {
    "to": null,
    "from": "0x123694886DBf5Ac94DDA07135349534536D14cAf",
    "contractAddress": "0x8adF3f35dBE4026112bCFc078872bcb967732Ea8",
    "transactionIndex": 158,
    "gasUsed": "670722",
    "logsBloom": "0x
    "blockHash": "0x4d8ffddbaeba013c8e024ad3de3dc3e9e925b827d39a6086f63a3f9c2d262d2e",
    "transactionHash": "0xee0d41cc8b64e436197e3f7521773a3733a7b0d42af14934c712efeaabff84fc",
    "logs": [
      {
        "transactionIndex": 158,
        "blockNumber": 15638809,
        "transactionHash": "0xee0d41cc8b64e436197e3f7521773a3733a7b0d42af14934c712efeaabff84fc",
        "address": "0x8adF3f35dBE4026112bCFc078872bcb967732Ea8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000123694886dbf5ac94dda07135349534536d14caf"
        ],
        "data": "0x",
        "logIndex": 236,
        "blockHash": "0x4d8ffddbaeba013c8e024ad3de3dc3e9e925b827d39a6086f63a3f9c2d262d2e"
      }
    ],
    "blockNumber": 15638809,
    "cumulativeGasUsed": "12287044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    40800,
    500000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "315dd8aa56418c14cbdc8d65adaa494b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_staticGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyContract\",\"type\":\"address\"}],\"name\":\"AuthorizedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"MaxGasPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SendingEtherFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStaticGas\",\"type\":\"uint256\"}],\"name\":\"StaticGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyContract\",\"type\":\"address\"}],\"name\":\"UnauthorizedContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_staticGas\",\"type\":\"uint256\"}],\"name\":\"setStaticGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorize(address)\":{\"params\":{\"_contract\":\"Authorized contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(uint256,address)\":{\"details\":\"Ignoring the result of sending ETH to a receiver is made on purpose.      For EOA receiving ETH should always work. If a receiver is a smart      contract, then we do not want to fail a transaction, because in some      cases the refund is done at the very end of multiple calls where all      the previous calls were already paid off. It is a receiver's smart      contract resposibility to make sure it can receive ETH.Only authorized contracts are allowed calling this function.\",\"params\":{\"gasSpent\":\"Gas spent on a transaction that needs to be reimbursed.\",\"receiver\":\"Address where the reimbursment is sent.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxGasPrice(uint256)\":{\"params\":{\"_maxGasPrice\":\"Max gas price used to reimburse tx submitters.\"}},\"setStaticGas(uint256)\":{\"params\":{\"_staticGas\":\"Static gas cost.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorize(address)\":{\"params\":{\"_contract\":\"Authorized contract.\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw from the pool.\",\"receiver\":\"An address where ETH is sent.\"}},\"withdrawAll(address)\":{\"params\":{\"receiver\":\"An address where ETH is sent.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorize(address)\":{\"notice\":\"Authorize a contract that can interact with this reimbursment pool.         Can be authorized by the owner only.\"},\"isAuthorized(address)\":{\"notice\":\"Authorized contracts that can interact with the reimbursment pool.         Authorization can be granted and removed by the owner.\"},\"maxGasPrice()\":{\"notice\":\"Max gas price used to reimburse a transaction submitter. Protects         against malicious operator-miners.\"},\"refund(uint256,address)\":{\"notice\":\"Refunds ETH to a spender for executing specific transactions.\"},\"setMaxGasPrice(uint256)\":{\"notice\":\"Setting a max gas price for transactions. Can be set by the         owner only.\"},\"setStaticGas(uint256)\":{\"notice\":\"Setting a static gas cost for executing a transaction. Can be set         by the owner only.\"},\"staticGas()\":{\"notice\":\"Static gas includes:         - cost of the refund function         - base transaction cost\"},\"unauthorize(address)\":{\"notice\":\"Unauthorize a contract that was previously authorized to interact         with this reimbursment pool. Can be unauthorized by the         owner only.\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws ETH amount from this pool which are sent to a given         address. Can be set by the owner only.\"},\"withdrawAll(address)\":{\"notice\":\"Withdraws all ETH from this pool which are sent to a given         address. Can be set by the owner only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReimbursementPool.sol\":\"ReimbursementPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ReimbursementPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n//\\n// \\u2593\\u2593\\u258c \\u2593\\u2593 \\u2590\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593    \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580      \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584\\u2584\\u2584\\u2584         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580        \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584       \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\u2580\\u2580\\u2580         \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2580\\n//   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593   \\u2580\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2584     \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593     \\u2593\\u2593\\u2593\\u2593\\u2593   \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u258c\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2588\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n// \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2590\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593 \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593  \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\n//\\n//                           Trust math, not hardware.\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ReimbursementPool is Ownable, ReentrancyGuard {\\n    /// @notice Authorized contracts that can interact with the reimbursment pool.\\n    ///         Authorization can be granted and removed by the owner.\\n    mapping(address => bool) public isAuthorized;\\n\\n    /// @notice Static gas includes:\\n    ///         - cost of the refund function\\n    ///         - base transaction cost\\n    uint256 public staticGas;\\n\\n    /// @notice Max gas price used to reimburse a transaction submitter. Protects\\n    ///         against malicious operator-miners.\\n    uint256 public maxGasPrice;\\n\\n    event StaticGasUpdated(uint256 newStaticGas);\\n\\n    event MaxGasPriceUpdated(uint256 newMaxGasPrice);\\n\\n    event SendingEtherFailed(uint256 refundAmount, address receiver);\\n\\n    event AuthorizedContract(address thirdPartyContract);\\n\\n    event UnauthorizedContract(address thirdPartyContract);\\n\\n    event FundsWithdrawn(uint256 withdrawnAmount, address receiver);\\n\\n    constructor(uint256 _staticGas, uint256 _maxGasPrice) {\\n        staticGas = _staticGas;\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    /// @notice Receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Refunds ETH to a spender for executing specific transactions.\\n    /// @dev Ignoring the result of sending ETH to a receiver is made on purpose.\\n    ///      For EOA receiving ETH should always work. If a receiver is a smart\\n    ///      contract, then we do not want to fail a transaction, because in some\\n    ///      cases the refund is done at the very end of multiple calls where all\\n    ///      the previous calls were already paid off. It is a receiver's smart\\n    ///      contract resposibility to make sure it can receive ETH.\\n    /// @dev Only authorized contracts are allowed calling this function.\\n    /// @param gasSpent Gas spent on a transaction that needs to be reimbursed.\\n    /// @param receiver Address where the reimbursment is sent.\\n    function refund(uint256 gasSpent, address receiver) external nonReentrant {\\n        require(\\n            isAuthorized[msg.sender],\\n            \\\"Contract is not authorized for a refund\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        uint256 gasPrice = tx.gasprice < maxGasPrice\\n            ? tx.gasprice\\n            : maxGasPrice;\\n\\n        uint256 refundAmount = (gasSpent + staticGas) * gasPrice;\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,unchecked-lowlevel\\n        (bool sent, ) = receiver.call{value: refundAmount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        if (!sent) {\\n            // slither-disable-next-line reentrancy-events\\n            emit SendingEtherFailed(refundAmount, receiver);\\n        }\\n    }\\n\\n    /// @notice Authorize a contract that can interact with this reimbursment pool.\\n    ///         Can be authorized by the owner only.\\n    /// @param _contract Authorized contract.\\n    function authorize(address _contract) external onlyOwner {\\n        isAuthorized[_contract] = true;\\n\\n        emit AuthorizedContract(_contract);\\n    }\\n\\n    /// @notice Unauthorize a contract that was previously authorized to interact\\n    ///         with this reimbursment pool. Can be unauthorized by the\\n    ///         owner only.\\n    /// @param _contract Authorized contract.\\n    function unauthorize(address _contract) external onlyOwner {\\n        delete isAuthorized[_contract];\\n\\n        emit UnauthorizedContract(_contract);\\n    }\\n\\n    /// @notice Setting a static gas cost for executing a transaction. Can be set\\n    ///         by the owner only.\\n    /// @param _staticGas Static gas cost.\\n    function setStaticGas(uint256 _staticGas) external onlyOwner {\\n        staticGas = _staticGas;\\n\\n        emit StaticGasUpdated(_staticGas);\\n    }\\n\\n    /// @notice Setting a max gas price for transactions. Can be set by the\\n    ///         owner only.\\n    /// @param _maxGasPrice Max gas price used to reimburse tx submitters.\\n    function setMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\\n        maxGasPrice = _maxGasPrice;\\n\\n        emit MaxGasPriceUpdated(_maxGasPrice);\\n    }\\n\\n    /// @notice Withdraws all ETH from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param receiver An address where ETH is sent.\\n    function withdrawAll(address receiver) external onlyOwner {\\n        withdraw(address(this).balance, receiver);\\n    }\\n\\n    /// @notice Withdraws ETH amount from this pool which are sent to a given\\n    ///         address. Can be set by the owner only.\\n    /// @param amount Amount to withdraw from the pool.\\n    /// @param receiver An address where ETH is sent.\\n    function withdraw(uint256 amount, address receiver) public onlyOwner {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver's address cannot be zero\\\");\\n\\n        emit FundsWithdrawn(amount, receiver);\\n\\n        /* solhint-disable avoid-low-level-calls */\\n        // slither-disable-next-line low-level-calls,arbitrary-send\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        /* solhint-enable avoid-low-level-calls */\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd6c24368cc4c6349b8b614e878ca961cad8254b8e8db1cc0abe452a70022ce50\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a49380380610a4983398101604081905261002f9161009a565b6100383361004a565b600180556003919091556004556100be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100ad57600080fd5b505080516020909101519092909150565b61097c806100cd6000396000f3fe6080604052600436106100c55760003560e01c8063b6a5d7de1161007f578063f0b37c0411610059578063f0b37c04146101ef578063f2fde38b1461020f578063fa09e6301461022f578063fe9fbb801461024f57600080fd5b8063b6a5d7de14610199578063d2fa635e146101b9578063e25b5345146101d957600080fd5b8062f714ce146100d15780633de39c11146100f35780633e2174041461011c578063715018a61461013c5780637ad226dc146101515780638da5cb5b1461017157600080fd5b366100cc57005b600080fd5b3480156100dd57600080fd5b506100f16100ec366004610858565b61028f565b005b3480156100ff57600080fd5b5061010960045481565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100f1610137366004610884565b6103f2565b34801561014857600080fd5b506100f1610436565b34801561015d57600080fd5b506100f161016c366004610858565b61044a565b34801561017d57600080fd5b506000546040516001600160a01b039091168152602001610113565b3480156101a557600080fd5b506100f16101b436600461089d565b610615565b3480156101c557600080fd5b506100f16101d4366004610884565b610671565b3480156101e557600080fd5b5061010960035481565b3480156101fb57600080fd5b506100f161020a36600461089d565b6106ae565b34801561021b57600080fd5b506100f161022a36600461089d565b610707565b34801561023b57600080fd5b506100f161024a36600461089d565b610780565b34801561025b57600080fd5b5061027f61026a36600461089d565b60026020526000908152604090205460ff1681565b6040519015158152602001610113565b610297610792565b814710156102ec5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064015b60405180910390fd5b6001600160a01b0381166103125760405162461bcd60e51b81526004016102e3906108bf565b604080518381526001600160a01b03831660208201527f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea910160405180910390a16000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103a0576040519150601f19603f3d011682016040523d82523d6000602084013e6103a5565b606091505b50509050806103ed5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016102e3565b505050565b6103fa610792565b60038190556040518181527fa86b6e9a406df021f05f513a796a1d5bea0bd3e18fe1d3f6082a3cccfc898d14906020015b60405180910390a150565b61043e610792565b61044860006107ec565b565b60026001540361049c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e3565b60026001819055336000908152602091909152604090205460ff166105135760405162461bcd60e51b815260206004820152602760248201527f436f6e7472616374206973206e6f7420617574686f72697a656420666f722061604482015266081c99599d5b9960ca1b60648201526084016102e3565b6001600160a01b0381166105395760405162461bcd60e51b81526004016102e3906108bf565b60006004543a1061054c5760045461054e565b3a5b9050600081600354856105619190610916565b61056b919061092f565b90506000836001600160a01b03168260405160006040518083038185875af1925050503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b505090508061060a57604080518381526001600160a01b03861660208201527fd955712c3ae4c3c40451db84ea0c4531c61cc0ea75c13fe9168ae0e07d71e050910160405180910390a15b505060018055505050565b61061d610792565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f2c74592fddad593c2c4403101ce9b30930711ab87571268ddd1e1989ee1d7917910161042b565b610679610792565b60048190556040518181527fa7a07f821dfdfca8e4baa9ccc4bbe7b782baac5946918bd19f1c9c761db414109060200161042b565b6106b6610792565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fe195aa139c7c69ba98f719c94aecd784e12fabc0789ef81335150078bc087317910161042b565b61070f610792565b6001600160a01b0381166107745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e3565b61077d816107ec565b50565b610788610792565b61077d478261028f565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461085357600080fd5b919050565b6000806040838503121561086b57600080fd5b8235915061087b6020840161083c565b90509250929050565b60006020828403121561089657600080fd5b5035919050565b6000602082840312156108af57600080fd5b6108b88261083c565b9392505050565b60208082526021908201527f5265636569766572277320616464726573732063616e6e6f74206265207a65726040820152606f60f81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561092957610929610900565b92915050565b80820281158282048414176109295761092961090056fea2646970667358221220578df9772b15d4ba1bc520679b4729538fcffa2275405fa7f9472c205cf79f2764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c55760003560e01c8063b6a5d7de1161007f578063f0b37c0411610059578063f0b37c04146101ef578063f2fde38b1461020f578063fa09e6301461022f578063fe9fbb801461024f57600080fd5b8063b6a5d7de14610199578063d2fa635e146101b9578063e25b5345146101d957600080fd5b8062f714ce146100d15780633de39c11146100f35780633e2174041461011c578063715018a61461013c5780637ad226dc146101515780638da5cb5b1461017157600080fd5b366100cc57005b600080fd5b3480156100dd57600080fd5b506100f16100ec366004610858565b61028f565b005b3480156100ff57600080fd5b5061010960045481565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100f1610137366004610884565b6103f2565b34801561014857600080fd5b506100f1610436565b34801561015d57600080fd5b506100f161016c366004610858565b61044a565b34801561017d57600080fd5b506000546040516001600160a01b039091168152602001610113565b3480156101a557600080fd5b506100f16101b436600461089d565b610615565b3480156101c557600080fd5b506100f16101d4366004610884565b610671565b3480156101e557600080fd5b5061010960035481565b3480156101fb57600080fd5b506100f161020a36600461089d565b6106ae565b34801561021b57600080fd5b506100f161022a36600461089d565b610707565b34801561023b57600080fd5b506100f161024a36600461089d565b610780565b34801561025b57600080fd5b5061027f61026a36600461089d565b60026020526000908152604090205460ff1681565b6040519015158152602001610113565b610297610792565b814710156102ec5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064015b60405180910390fd5b6001600160a01b0381166103125760405162461bcd60e51b81526004016102e3906108bf565b604080518381526001600160a01b03831660208201527f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea910160405180910390a16000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103a0576040519150601f19603f3d011682016040523d82523d6000602084013e6103a5565b606091505b50509050806103ed5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016102e3565b505050565b6103fa610792565b60038190556040518181527fa86b6e9a406df021f05f513a796a1d5bea0bd3e18fe1d3f6082a3cccfc898d14906020015b60405180910390a150565b61043e610792565b61044860006107ec565b565b60026001540361049c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e3565b60026001819055336000908152602091909152604090205460ff166105135760405162461bcd60e51b815260206004820152602760248201527f436f6e7472616374206973206e6f7420617574686f72697a656420666f722061604482015266081c99599d5b9960ca1b60648201526084016102e3565b6001600160a01b0381166105395760405162461bcd60e51b81526004016102e3906108bf565b60006004543a1061054c5760045461054e565b3a5b9050600081600354856105619190610916565b61056b919061092f565b90506000836001600160a01b03168260405160006040518083038185875af1925050503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b505090508061060a57604080518381526001600160a01b03861660208201527fd955712c3ae4c3c40451db84ea0c4531c61cc0ea75c13fe9168ae0e07d71e050910160405180910390a15b505060018055505050565b61061d610792565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f2c74592fddad593c2c4403101ce9b30930711ab87571268ddd1e1989ee1d7917910161042b565b610679610792565b60048190556040518181527fa7a07f821dfdfca8e4baa9ccc4bbe7b782baac5946918bd19f1c9c761db414109060200161042b565b6106b6610792565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fe195aa139c7c69ba98f719c94aecd784e12fabc0789ef81335150078bc087317910161042b565b61070f610792565b6001600160a01b0381166107745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e3565b61077d816107ec565b50565b610788610792565b61077d478261028f565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461085357600080fd5b919050565b6000806040838503121561086b57600080fd5b8235915061087b6020840161083c565b90509250929050565b60006020828403121561089657600080fd5b5035919050565b6000602082840312156108af57600080fd5b6108b88261083c565b9392505050565b60208082526021908201527f5265636569766572277320616464726573732063616e6e6f74206265207a65726040820152606f60f81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561092957610929610900565b92915050565b80820281158282048414176109295761092961090056fea2646970667358221220578df9772b15d4ba1bc520679b4729538fcffa2275405fa7f9472c205cf79f2764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorize(address)": {
        "params": {
          "_contract": "Authorized contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "refund(uint256,address)": {
        "details": "Ignoring the result of sending ETH to a receiver is made on purpose.      For EOA receiving ETH should always work. If a receiver is a smart      contract, then we do not want to fail a transaction, because in some      cases the refund is done at the very end of multiple calls where all      the previous calls were already paid off. It is a receiver's smart      contract resposibility to make sure it can receive ETH.Only authorized contracts are allowed calling this function.",
        "params": {
          "gasSpent": "Gas spent on a transaction that needs to be reimbursed.",
          "receiver": "Address where the reimbursment is sent."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxGasPrice(uint256)": {
        "params": {
          "_maxGasPrice": "Max gas price used to reimburse tx submitters."
        }
      },
      "setStaticGas(uint256)": {
        "params": {
          "_staticGas": "Static gas cost."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unauthorize(address)": {
        "params": {
          "_contract": "Authorized contract."
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw from the pool.",
          "receiver": "An address where ETH is sent."
        }
      },
      "withdrawAll(address)": {
        "params": {
          "receiver": "An address where ETH is sent."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorize(address)": {
        "notice": "Authorize a contract that can interact with this reimbursment pool.         Can be authorized by the owner only."
      },
      "isAuthorized(address)": {
        "notice": "Authorized contracts that can interact with the reimbursment pool.         Authorization can be granted and removed by the owner."
      },
      "maxGasPrice()": {
        "notice": "Max gas price used to reimburse a transaction submitter. Protects         against malicious operator-miners."
      },
      "refund(uint256,address)": {
        "notice": "Refunds ETH to a spender for executing specific transactions."
      },
      "setMaxGasPrice(uint256)": {
        "notice": "Setting a max gas price for transactions. Can be set by the         owner only."
      },
      "setStaticGas(uint256)": {
        "notice": "Setting a static gas cost for executing a transaction. Can be set         by the owner only."
      },
      "staticGas()": {
        "notice": "Static gas includes:         - cost of the refund function         - base transaction cost"
      },
      "unauthorize(address)": {
        "notice": "Unauthorize a contract that was previously authorized to interact         with this reimbursment pool. Can be unauthorized by the         owner only."
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws ETH amount from this pool which are sent to a given         address. Can be set by the owner only."
      },
      "withdrawAll(address)": {
        "notice": "Withdraws all ETH from this pool which are sent to a given         address. Can be set by the owner only."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3888,
        "contract": "contracts/ReimbursementPool.sol:ReimbursementPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4004,
        "contract": "contracts/ReimbursementPool.sol:ReimbursementPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14694,
        "contract": "contracts/ReimbursementPool.sol:ReimbursementPool",
        "label": "isAuthorized",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14697,
        "contract": "contracts/ReimbursementPool.sol:ReimbursementPool",
        "label": "staticGas",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14700,
        "contract": "contracts/ReimbursementPool.sol:ReimbursementPool",
        "label": "maxGasPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}