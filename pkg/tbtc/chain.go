package tbtc

import (
	"math/big"

	"github.com/keep-network/keep-core/pkg/bitcoin"
	"github.com/keep-network/keep-core/pkg/chain"
	"github.com/keep-network/keep-core/pkg/operator"
	"github.com/keep-network/keep-core/pkg/protocol/group"
	"github.com/keep-network/keep-core/pkg/sortition"
	"github.com/keep-network/keep-core/pkg/subscription"
	"github.com/keep-network/keep-core/pkg/tecdsa/dkg"
)

type DKGState int

const (
	Idle DKGState = iota
	AwaitingSeed
	AwaitingResult
	Challenge
)

// GroupSelectionChain defines the subset of the TBTC chain interface that
// pertains to the group selection activities.
type GroupSelectionChain interface {
	// SelectGroup returns the group members for the group generated by
	// the given seed. This function can return an error if the TBTC chain's
	// state does not allow for group selection at the moment.
	SelectGroup(seed *big.Int) (chain.Addresses, error)
}

// DistributedKeyGenerationChain defines the subset of the TBTC chain
// interface that pertains specifically to group formation's distributed key
// generation process.
type DistributedKeyGenerationChain interface {
	// OnDKGStarted registers a callback that is invoked when an on-chain
	// notification of the DKG process start is seen.
	OnDKGStarted(
		func(event *DKGStartedEvent),
	) subscription.EventSubscription

	// OnDKGResultSubmitted registers a callback that is invoked when an on-chain
	// notification of the DKG result submission is seen.
	OnDKGResultSubmitted(
		func(event *DKGResultSubmittedEvent),
	) subscription.EventSubscription

	// SubmitDKGResult submits the DKG result to the chain, along with signatures
	// over result hash from group participants supporting the result.
	SubmitDKGResult(
		memberIndex group.MemberIndex,
		result *dkg.Result,
		signatures map[group.MemberIndex][]byte,
	) error

	// GetDKGState returns the current state of the DKG procedure.
	GetDKGState() (DKGState, error)

	// CalculateDKGResultHash calculates 256-bit hash of DKG result in standard
	// specific for the chain. Operation is performed off-chain.
	CalculateDKGResultHash(result *dkg.Result) (dkg.ResultHash, error)
}

// DKGStartedEvent represents a DKG start event.
type DKGStartedEvent struct {
	Seed        *big.Int
	BlockNumber uint64
}

// DKGResultSubmittedEvent represents a DKG result submission event. It is emitted
// after a submitted DKG result is positively validated on the chain. It contains
// the index of the member who submitted the result and a final public key of
// the group.
type DKGResultSubmittedEvent struct {
	MemberIndex         uint32
	GroupPublicKeyBytes []byte
	Misbehaved          []uint8

	BlockNumber uint64
}

// BridgeChain defines the subset of the TBTC chain interface that pertains
// specifically to the tBTC Bridge operations.
type BridgeChain interface {
	// OnSignatureRequested registers a callback that is invoked when an
	// on-chain notification of the Bridge signature request is seen.
	//
	// TODO: This is a temporary function that should be removed once the client
	//       is integrated with real on-chain contracts. This is because the
	//       Bridge contract will not request wallets' signatures in such an
	//       explicit way. It will emit some domain-specific events and specific
	//       wallets will respond in an appropriate way, often by building and
	//       signing BTC transactions. However, for this iteration, we want to
	//       have a test signing loop so we are simulating that signatures are
	//       requested by the Bridge explicitly.
	OnSignatureRequested(
		func(event *SignatureRequestedEvent),
	) subscription.EventSubscription
}

// SignatureRequestedEvent represents a Bridge signature request event.
//
// TODO: This is a temporary structure that should be removed once the client
//       is integrated with real on-chain contracts.
type SignatureRequestedEvent struct {
	WalletPublicKey []byte
	Messages        []*big.Int
	BlockNumber     uint64
}

type RelayChain interface {
	// Ready checks whether the relay is active (i.e. genesis has been
	// performed).
	Ready() (bool, error)

	// AuthorizationRequired checks whether the relay requires the address
	// submitting a retarget to be authorised in advance by governance.
	AuthorizationRequired() (bool, error)

	// IsAuthorized checks whether the given address has been authorised to
	// submit a retarget by governance.
	IsAuthorized(address chain.Address) (bool, error)

	// Retarget adds a new epoch to the relay by providing a proof
	// of the difficulty before and after the retarget.
	Retarget(headers []*bitcoin.BlockHeader) error

	// CurrentEpoch returns the number of the latest epoch whose difficulty is
	// proven to the relay.
	CurrentEpoch() (uint64, error)

	// ProofLength returns the number of blocks required for each side of a
	// retarget proof.
	ProofLength() (uint64, error)
}

// Chain represents the interface that the TBTC module expects to interact
// with the anchoring blockchain on.
type Chain interface {
	// GetConfig returns the expected configuration of the TBTC module.
	GetConfig() *ChainConfig
	// BlockCounter returns the chain's block counter.
	BlockCounter() (chain.BlockCounter, error)
	// Signing returns the chain's signer.
	Signing() chain.Signing
	// OperatorKeyPair returns the key pair of the operator assigned to this
	// chain handle.
	OperatorKeyPair() (*operator.PrivateKey, *operator.PublicKey, error)

	sortition.Chain
	GroupSelectionChain
	DistributedKeyGenerationChain
	BridgeChain
	RelayChain
}

// ChainConfig contains the config data needed for the TBTC to operate.
type ChainConfig struct {
	// GroupSize is the target size of a group in TBTC.
	GroupSize int
	// GroupQuorum is the minimum number of active participants behaving
	// according to the protocol needed to generate a group in TBTC. This value
	// is smaller than the GroupSize and bigger than the HonestThreshold.
	GroupQuorum int
	// HonestThreshold is the minimum number of active participants behaving
	// according to the protocol needed to generate a signature.
	HonestThreshold int
}

// DishonestThreshold is the maximum number of misbehaving participants for
// which it is still possible to generate a signature.
// Misbehaviour is any misconduct to the protocol, including inactivity.
func (cc *ChainConfig) DishonestThreshold() int {
	return cc.GroupSize - cc.HonestThreshold
}
