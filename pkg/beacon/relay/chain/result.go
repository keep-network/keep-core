package chain

import (
	"bytes"
)

// DKGResult is a result of distributed key generation protocol.
//
// Success means that the protocol execution finished with acceptable number of
// disqualified or inactive members. The group of remaining members should be
// added to the signing groups for the threshold relay.
//
// Failure means that the group creation could not finish, due to either the number
// of inactive or disqualified participants, or the presented results being
// disputed in a way where the correct outcome cannot be ascertained.
type DKGResult struct {
	// Result type of the protocol execution. True if success, false if failure.
	Success bool
	// Group public key generated by protocol execution, empty if the protocol failed.
	GroupPublicKey [32]byte
	// Disqualified members are represented as a slice of bytes for optimizing
	// on-chain storage. The length of the slice, and ordering of the members is
	// the same as the members group. Disqualified members are marked as 0x01,
	// non-disqualified members as 0x00.
	Disqualified []byte
	// Inactive members are represented as a slice of bytes for optimizing
	// on-chain storage. The length of the slice, and ordering of the members is
	// the same as the members group. Inactive members are marked as 0x01,
	// active members as 0x00.
	Inactive []byte
}

// Equals checks if two DKG results are equal.
func (r1 *DKGResult) Equals(r2 *DKGResult) bool {
	if r1 == nil || r2 == nil {
		return r1 == r2
	}
	if r1.Success != r2.Success {
		return false
	}
	if !bytes.Equal(r1.GroupPublicKey[:], r2.GroupPublicKey[:]) {
		return false
	}
	if !bytes.Equal(r1.Disqualified, r2.Disqualified) {
		return false
	}
	if !bytes.Equal(r1.Inactive, r2.Inactive) {
		return false
	}
	return true
}
