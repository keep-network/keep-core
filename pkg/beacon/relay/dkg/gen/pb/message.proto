syntax = "proto3";

option go_package = "pb";
package dkg;

// Join represents a request from the sender to join the distributed key
// generation process. It carries the data on the sender's id for keygen
// purposes.
message Join {
    // The little-endian BLS ID of the member who is joining the distributed key
    // generation process.
    bytes id = 1;
}

// Commitments represents the public commitments of the sender to their private
// key share for use in the distributed key generation process.
message Commitments {
    // The little-endian BLS ID of the member whose public commitment is
    // enclosed.
    bytes id = 1;
    repeated bytes commitments = 2;
}

// Share represents the *private* share from the sender to a *specific* receiver
// for use in the distributed key generation process.
message Share {
    // The little-endian BLS ID of the member whose private share is enclosed.
    bytes id = 1;
    // The little-endian BLS ID of the member meant to receive the private
    // share.
    bytes receiverID = 2;
    // The little-endian private share from `id` to `receiverID`.
    bytes share = 3;
}

// Accusations represents the sender's public accusations indicating that they
// observed either no share or a bad share from the participants with the listed
// ids.
message Accusations {
    // The little-endian BLS ID of the member who is accusing the enclosed ids
    // of misbehavior.
    bytes id = 1;
    // The little-endian BLS IDs of accused members.
    repeated bytes accusedIDs = 2;
}

// Justifications represents the sender's public response to accusations from
// other members, publicly revealing the private share the sender holds for each
// of the accusers.
message Justifications {
    // The little-endian BLS ID of the member who is justifying themselves
    // against existing accusations.
    bytes id = 1;
    // Associates a hex string member id to little-endian private share bytes
    // from the sender for that member. We use a hex string because protobuf
    // doesn't support bytes as a map key; note that keys are a hex string
    // encoding of the same data structure stored in the `id` field.
    map<string, bytes> justificationsByID = 2;
}
