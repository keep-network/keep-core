package gjkr

import bn256 "github.com/ethereum/go-ethereum/crypto/bn256/cloudflare"

// Result of distributed key generation protocol.
//
// Success means that the protocol execution finished with acceptable number of
// disqualified or inactive members. The group of remaining members should be
// added to the signing groups for the threshold relay.
//
// Failure means that the group creation could not finish, due to either the number
// of inactive or disqualified participants, or the presented results being
// disputed in a way where the correct outcome cannot be ascertained.
type Result struct {
	// Result type of the protocol execution. True if success, false if failure.
	Success bool
	// Group public key generated by protocol execution.
	GroupPublicKey *bn256.G2
	// Disqualified members IDs.
	Disqualified []MemberID
	// Inactive members IDs.
	Inactive []MemberID
}

// Equals checks if two results are equal.
func (r *Result) Equals(r2 *Result) bool {
	if r == nil || r2 == nil {
		return r == r2
	}
	if r.Success != r2.Success {
		return false
	}

	if !publicKeysEqual(r.GroupPublicKey, r2.GroupPublicKey) {
		return false
	}

	if !memberIDSlicesEqual(r.Disqualified, r2.Disqualified) {
		return false
	}
	if !memberIDSlicesEqual(r.Inactive, r2.Inactive) {
		return false
	}

	return true
}

// publicKeysEqual checks if two public keys are equal.
func publicKeysEqual(expectedKey *bn256.G2, actualKey *bn256.G2) bool {
	if expectedKey != nil && actualKey != nil {
		return expectedKey.String() == actualKey.String()
	}
	return expectedKey == actualKey
}

// memberIDSlicesEqual checks if two slices of MemberIDs are equal. Slices need
// to have the same length and have the same order of entries.
func memberIDSlicesEqual(expectedSlice []MemberID, actualSlice []MemberID) bool {
	if len(expectedSlice) != len(actualSlice) {
		return false
	}

	for i := range expectedSlice {
		if expectedSlice[i] != actualSlice[i] {
			return false
		}
	}
	return true
}
