{{- range .Values.nodes }}
apiVersion: extensions/v1beta1 
kind: Deployment
metadata:
  name: {{ template "geth.fullname" $ }}-{{ .nodeName }}-deployment
  labels:
    app: {{ template "geth.name" $ }}-{{ .nodeName }}-deployment
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "geth.name" $ }}-{{ .nodeName }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "geth.name" $ }}-{{ .nodeName }}
        release: {{ $.Release.Name }}
    spec:
      initContainers:
        - name: genesis
          image: {{ $.Values.node.image.repository }}:{{ $.Values.node.image.tag }}
          args: ["--datadir", "/data", "init", "/var/geth/genesis.json"]
          volumeMounts:
            - name: datadir
              mountPath: /data
            - name: config
              mountPath: /var/geth
        - name: get-bootnode
          image: {{ $.Values.node.image.repository }}:{{ $.Values.node.image.tag }}
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
{{ $.Files.Get "scripts/get_bootnode_address.sh" | indent 14 }}
          env:
            - name: BOOTNODE_SERVICE
              value: {{ template "geth.fullname" $ }}-bootnode-service.{{ $.Release.Namespace }}
          volumeMounts:
            - name: bootnode
              mountPath: /bootnode
      containers:
        - name: node
          image: {{ $.Values.node.image.repository }}:{{ $.Values.node.image.tag }}
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
{{ if eq .nodeType "miner" }}{{ $.Files.Get "scripts/start_miner.sh" | indent 14 }}{{ end }}{{ if eq .nodeType "tx" }}{{ $.Files.Get "scripts/start_node.sh" | indent 14 }}{{ end }}
          env:
            - name: MONITOR_SERVICE
              value: {{ template "geth.fullname" $ }}-monitor-service.{{ $.Release.Namespace }}
            - name: MONITOR_SECRET
              value: websocket-access-secret
            - name: ETHERBASE
              valueFrom:
                configMapKeyRef:
                  name: {{ template "geth.fullname" $ }}-config
                  key: etherbase
            - name: NETWORK_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ template "geth.fullname" $ }}-config
                  key: chainId
            - name: NETRESTRICT
              value: {{ $.Values.node.netrestrict }}
          ports:
            - name: rpc
              containerPort: 8545
            - name: ws
              containerPort: 8546
            - name: discovery-udp
              containerPort: 30303
              protocol: UDP
            - name: discovery-tcp
              containerPort: 30303
          volumeMounts:
            - name: datadir
              mountPath: /data
            - name: bootnode
              mountPath: /bootnode
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ template "geth.fullname" $ }}-{{ .nodeName }}-storage
        - name: bootnode
          emptyDir: {}
        - name: config 
          configMap:
            name: {{ template "geth.fullname" $ }}-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ template "geth.fullname" $ }}-{{ .nodeName }}-storage
  # Uncomment if you prefer to keep node storage (chaindata) when deleting release via HELM
  annotations:
    "helm.sh/resource-policy": keep
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
{{- end }}
